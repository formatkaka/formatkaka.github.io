export const sampleProblems = [
  {
    id: 1,
    name: 'Two Sum',
    link: 'https://leetcode.com/problems/two-sum/',
    difficulty: 'Easy',
    itemType: 'DSA',
    topic: 'Array',
    company: 'Google',
    confidence: 0,
    status: 'not-started',
    attempts: 0,
    lastSolved: null,
    nextReview: null,
    created: new Date().toISOString(),
    concepts: [1],
  },
  {
    id: 2,
    name: 'React Hooks Deep Dive',
    link: 'https://react.dev/reference/react',
    difficulty: 'Medium',
    itemType: 'Concept',
    topic: 'React',
    company: 'Facebook',
    confidence: 0,
    status: 'not-started',
    attempts: 0,
    lastSolved: null,
    nextReview: null,
    created: new Date().toISOString(),
    concepts: [2],
  },
  {
    id: 3,
    name: 'System Design Primer',
    link: 'https://github.com/donnemartin/system-design-primer',
    difficulty: 'Hard',
    itemType: 'Article',
    topic: 'System Design',
    company: '',
    confidence: 0,
    status: 'not-started',
    attempts: 0,
    lastSolved: null,
    nextReview: null,
    created: new Date().toISOString(),
  },
  {
    id: 4,
    name: 'CSS Grid Layout',
    link: 'https://www.greatfrontend.com/questions/css/grid-layout',
    difficulty: 'Medium',
    itemType: 'Frontend',
    topic: 'CSS',
    company: 'Airbnb',
    confidence: 0,
    status: 'not-started',
    attempts: 0,
    lastSolved: null,
    nextReview: null,
    created: new Date().toISOString(),
  },
  {
    id: 5,
    name: 'Coin Change',
    link: 'https://leetcode.com/problems/coin-change/',
    difficulty: 'Medium',
    itemType: 'DSA',
    topic: 'Dynamic Programming',
    company: 'Amazon',
    confidence: 0,
    status: 'not-started',
    attempts: 0,
    lastSolved: null,
    nextReview: null,
    created: new Date().toISOString(),
    concepts: [3],
  },
];

export const sampleConcepts = [
  {
    id: 1,
    name: 'Two Pointer Pattern',
    category: 'DSA Patterns',
    description:
      'Technique using two pointers to solve array/string problems efficiently. ' +
      'Common in problems involving pairs, triplets, or subarrays.',
    resources: [
      {
        type: 'article' as const,
        title: 'Two Pointer Technique Guide',
        link: 'https://leetcode.com/articles/two-pointer-technique/',
        notes: 'Great overview with examples',
        completedAt: new Date().toISOString(),
      },
      {
        type: 'video' as const,
        title: 'Two Pointers Explained',
        link: 'https://youtube.com/watch?v=example',
        notes: null,
        completedAt: null,
      },
    ],
    relatedQuestions: [1],
    confidence: 3,
    status: 'practicing' as const,
    tags: ['array', 'optimization', 'two-pointer'],
    created: new Date().toISOString(),
    lastReviewed: new Date().toISOString(),
    nextReview: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000).toISOString(),
  },
  {
    id: 2,
    name: 'Compound Component Pattern',
    category: 'React Patterns',
    description:
      'Design pattern for creating flexible and reusable React components. ' +
      'Components work together by sharing implicit state through Context.',
    resources: [
      {
        type: 'article' as const,
        title: 'Compound Components Pattern',
        link: 'https://patterns.dev/posts/compound-pattern',
        notes: 'Excellent explanation with real examples',
        completedAt: new Date().toISOString(),
      },
      {
        type: 'project' as const,
        title: 'Tabs Component Implementation',
        link: 'https://github.com/yourusername/tabs-project',
        notes: 'Built a tabs component using this pattern',
        completedAt: new Date().toISOString(),
      },
      {
        type: 'documentation' as const,
        title: 'React Context API',
        link: 'https://react.dev/reference/react/createContext',
        notes: null,
        completedAt: null,
      },
    ],
    relatedQuestions: [2],
    confidence: 4,
    status: 'mastered' as const,
    tags: ['react', 'component-design', 'context', 'advanced'],
    created: new Date().toISOString(),
    lastReviewed: new Date().toISOString(),
    nextReview: new Date(Date.now() + 18 * 24 * 60 * 60 * 1000).toISOString(),
  },
  {
    id: 3,
    name: 'Unbounded Knapsack DP',
    category: 'DP Patterns',
    description:
      'Dynamic programming pattern where items can be used unlimited times. ' +
      'Common in coin change, rod cutting, and similar optimization problems.',
    resources: [
      {
        type: 'article' as const,
        title: 'DP Patterns Guide',
        link: 'https://leetcode.com/discuss/general-discussion/458695',
        notes: 'Comprehensive guide to all DP patterns',
        completedAt: null,
      },
      {
        type: 'video' as const,
        title: 'Knapsack Problems Explained',
        link: 'https://youtube.com/watch?v=example2',
        notes: 'Clear visual explanation',
        completedAt: new Date().toISOString(),
      },
    ],
    relatedQuestions: [5],
    confidence: 2,
    status: 'learning' as const,
    tags: ['dp', 'optimization', 'knapsack'],
    created: new Date().toISOString(),
    lastReviewed: null,
    nextReview: new Date(Date.now() + 4 * 24 * 60 * 60 * 1000).toISOString(),
  },
];
